datasource db {
  provider          = "postgres"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// https://www.prisma.io/docs/concepts/components/prisma-schema/data-model#defining-a-unique-field
// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#unique-1
// https://www.prisma.io/docs/reference/api-reference/command-reference#format

// yarn rw g scaffold user;
// yarn rw g scaffold note;
// yarn rw g scaffold realm;
// yarn rw g scaffold serviceRate;

model User {
  id Int @id @unique @default(autoincrement())

  handle              String    @unique
  hashedPassword      String    @default("")
  salt                String    @default("")
  resetToken          String?
  resetTokenExpiresAt DateTime?

  roles String @default("guest") // developer,installer

  email     String?
  firstName String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rates ServiceRate[]
}

model ServiceRate {
  id Int @id @default(autoincrement())

  // uuid String @default(uuid())

  value     Int     @default(0) // 2/9.50
  unit      String  @default("") // per SqFt,yard
  task      String  @default("") // to remove/install
  material  String  @default("") // LVT/carpet
  modifiers String? // pattern,softback

  description String? // further specificy with comments here

  authorId Int?  @default(1)
  author   User? @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([authorId, id])
}

// model Note {
//   id      Int     @id @default(autoincrement())
//   title   String
//   content String?

//   authorId Int?  @default(1)
//   author   User? @relation(fields: [authorId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([authorId, id])
// }

// model Realm {
//   id    Int    @id @default(autoincrement())
//   title String

//   address String?
//   city    String?
//   state   String?
//   zip     Int?

//   lat  String?
//   long String?

//   ownerId Int?  @default(1)
//   owner   User? @relation(fields: [ownerId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([ownerId, id])
// }

// model JobSheet {
//   id    Int     @id @default(autoincrement())
//   jobId String? @default(uuid())

//   startDate DateTime @default(now())
//   endDate   DateTime @default(now())
//   rep       String   @default("")

//   customerName    String  @default("")
//   customerPhone   String?
//   customerAddress String  @default("")

//   workType     String  @default("")
//   workMaterial String  @default("")
//   areas        String?
//   products     String?
//   subfloorType String  @default("")
//   transition   String?
//   notes        String? @default("")

//   markedAsComplete Boolean @default(false)

//   owner   User? @relation(fields: [ownerId], references: [id])
//   ownerId Int?  @default(1)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model PayStub {
//   id   Int    @id @unique @default(autoincrement())
//   uuid String @default(uuid())

//   payor        String?  @default("")
//   salesRep     String?  @default("")
//   jobName      String?  @default("")
//   paidDate     DateTime @default(now())
//   paidAmount   Int      @default(0)
//   paidCurrency String?  @default("USD")
//   checkNumber  Int

//   User   User? @relation(fields: [userId], references: [id])
//   userId Int?  @default(1)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt()
// }
